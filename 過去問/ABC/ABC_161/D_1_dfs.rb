# 再帰関数（DFS）
K = gets.to_i

def dfs(d, val, all)  # 再帰関数(d=桁数,val=現在の値,all=全ての値が入る配列)
  all << val          # まず値を入れる
  return if d == 10   # 10桁で終了する

  (-1..1).each do |i| # 現在の値の-1,0,1が次の桁の候補
    add = (val % 10) + i
    # addが、0..9なら桁を1つ増やして、addを最低位に挿入。allの配列も渡しておく。
    rec(d+1,val*10 + add, all) if add >= 0 && add <= 9
  end
end

all = []
(1..9).each{|i| dfs(1, i, all) } # 最高位が1..9からスタート

puts all.sort[K-1]





all = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000,
  1000000000, 1000000001, 100000001, 1000000010, 1000000011, 1000000012,
  10000001, 100000010, 1000000100, 1000000101, 100000011, 1000000110,
  1000000111, 1000000112, 100000012, 1000000121, 1000000122, 1000000123,
  1000001, 10000010, 100000100, 1000001000, 1000001001, 100000101,
  1000001010, 1000001011, 1000001012, 10000011, 100000110, 1000001100,
  1000001101, 100000111, 1000001110, 1000001111, 1000001112, 100000112,
  1000001121, 1000001122, 1000001123, 10000012, 100000121, 1000001210,
  1000001211, 1000001212, 100000122, 1000001221, 1000001222, 1000001223,
  100000123, 1000001232, 1000001233, 1000001234, 100001, 1000010, 10000100,
  100001000, 1000010000, 1000010001, 100001001, 1000010010, 1000010011,
  1000010012, 10000101, 100001010, 1000010100, 1000010101, 100001011,
  1000010110, 1000010111, 1000010112, 100001012, 1000010121, 1000010122,
  1000010123, 1000011, 10000110, 100001100, 1000011000, 1000011001,
  100001101, 1000011010, 1000011011, 1000011012, 10000111, 100001110,
  1000011100, 1000011101, 100001111, 1000011110, 1000011111, 1000011112,
  100001112]
